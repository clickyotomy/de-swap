de-swap
-------

Bring back swapped out pages into memory.

The program works by performing a read operation (which forces a
"swap-in") on a region of memory that has been paged out to swap.

In most cases, it is unnecessary to run this, because the kernel
knows what it's doing. However, if there is a really good reason
to (quicky) force "swapped-out" pages back into memory, `de-swap'
runs faster compared to `swapoff'.

Before running the program, it is probably a good idea to drop
caches (free slab objects and the page-cache [1]) with:

    $ sync; echo 3 > /proc/sys/vm/drop_caches

and verify that there is enough memory before running the program.
If there isn't enough "free" memory to swap into, `oom-kill' will
likely be triggered or, something worse (like a kernel panic).
After it exits, run:

    $ swapoff [-v] [/<swapfile>|-a]; swapon [-v] [/<swapfile>|-a]

to clear the already swapped in memory from the swap space. This
time, `swapoff' will be faster because there isn't much work for
it to do.

The regions of memory that have been swapped out can be fetched
by parsing "/proc/<PID>/smaps" for a process. The process's virtual
address space (its memory) [4] can then be accessed via by reading
its "/proc/<PID>/mem" file.

By "seek()"-ing to an offset obtained by parsing "/proc<PID>/smaps"
(the "paged-out-to-swap" regions) and making a "read()" operation
will bring them back to memory.

For more information, the answers and comments in this [3] thread
are quite helpful. "Deactivating a Swap Area (11.9)" [4], describes
how the swap area is freed in good detail.


BUILD
    To generate the binary, run "make".

USAGE
    de-swap -p <pid> [-n -j <threads> -v[v]]

ARGUMENTS
    -p     PID of the process to swap-in
    -n     no-op mode; turned off by default
    -j     number of parallel operations; runs as a
           single thread if unspecified
    -r     split memory regions with large swap areas
           into smaller regions for better throughput
           during reads
    -v[v]  output verbosity; off by default


REFERENCE
    [1]: https://www.kernel.org/doc/Documentation/sysctl/vm.txt
    [2]: https://www.kernel.org/doc/Documentation/filesystems/proc.txt
    [3]: https://unix.stackexchange.com/questions/45673
    [4]: https://www.kernel.org/doc/gorman/html/understand/understand014.html
