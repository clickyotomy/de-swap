de-swap
-------

Bring back swapped out pages into memory.

The program works by performing a read operation (which forces a
"swap-in") on a region of memory that has been paged out to swap

In most cases, it is unnecessary to run this program, because the
kernel knows what it is doing. However, if there is a really good
reason to force the "swapped-out" pages back in, this program can
be useful.

Before running the program, it is probably a good idea to drop
caches (free slab objects and page-cache [1]) with:

 	$ sync; echo 3 > /proc/sys/vm/drop_caches

and verify that there is enough memory before running this program.
If there isn't enough "free" memory to swap into, the "oom-killer"
will likely be triggered or something worse (a kernel panic).


The regions of memory that have been swapped out can be fetched by
parsing "/proc/<PID>/smaps" [2] for a process. The process's virtual
address space (its memory) can be accessed via "/proc/<PID>/mem" [2].

By "seek()"-ing to an offset obtained by parsing "/proc<PID>/smaps"
(the "paged-out-to-swap" regions) and making a "read()" operation
will bring them back to memory.

For more information, the answers and comments in this [3] thread
are quite helpful. This document [4] describes how the swap area
is freed in great detail.

BUILD
	To generate the binary, run "make".

USAGE
	de-swap -p <pid> [-n -j <threads> -v[v]]

ARGUMENTS
	  -p       PID of the process to swap-in
	  -n       no-op mode; off by default
	  -j       number of parallel operations; defaults
		   to a single thread if unspecified
	  -v[v]    output verbosity; off by default


[1] https://www.kernel.org/doc/Documentation/sysctl/vm.txt
[2] https://www.kernel.org/doc/Documentation/filesystems/proc.txt
[3] https://unix.stackexchange.com/questions/45673
[4] https://www.kernel.org/doc/gorman/html/understand/understand014.html#toc81
